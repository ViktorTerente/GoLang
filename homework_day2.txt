package main

import (
	"fmt"
	"math"
)

/*
Написать функцию.
Входные аргументы функции: количество бутылок от 0 до 200.
Функция должна вернуть количество и слово бутыл<?> с правильным окончанием.
Пример :
In: 5
Out: 5 бутылок

In: 1
Out: 1 бутылка

In: 22
Out: 22 бутылки
*/

func getBottleEnds(cnt int) {

	if cnt < 0 || cnt > 200 {
		fmt.Println("Количество должно быть в диапазоне от 0 до 200")
		return
	}

	var compl string
	var modCnt int

	modCnt = (cnt % 100) % 10

	switch {
	case modCnt > 4 && modCnt < 20 || modCnt == 0:
		compl = "бутылок"
	case modCnt == 1:
		compl = "бутылка"
	case modCnt > 1 && modCnt < 5:
		compl = "бутылки"
	}

	fmt.Printf("%d %s\n", cnt, compl)
}

/*
Написать 3 функции.
Даны координаты трех точек(x1, y1, x2, y2, x3, y3), значения(целые) которых >= 0.
Первая функция проверяет, что можно построить треугольник по заданным точкам
Вторая функция вычисляет площадь треугольника.
Третья функция должна определить, является ли треугольник прямоугольным.
*/

// служебная функция расчитывает длину стороны треугольника
func getLineTriangle(x1, y1, x2, y2 float64) float64 {

	if x1 < 0 || x2 < 0 || y1 < 0 || y2 < 0 {
		fmt.Println("Значение координаты должно быть больше или равно 0")
		return 0
	}

	return math.Sqrt(math.Pow(x2-x1, 2) + math.Pow(y2-y1, 2))

}

// Первая функция проверяет, что можно построить треугольник по заданным точкам
func isTriangle(x1, y1, x2, y2, x3, y3 float64) bool {
	if getSquareTriangle(x1, y1, x2, y2, x3, y3) == 0 {
		return false
	} else {
		return true
	}

}

// Вторая функция вычисляет площадь треугольника
func getSquareTriangle(x1, y1, x2, y2, x3, y3 float64) float64 {

	line1 := getLineTriangle(x1, y1, x2, y2)

	line2 := getLineTriangle(x2, y2, x3, y3)

	line3 := getLineTriangle(x1, y1, x3, y3)

	halfPerim := (line1 + line2 + line3) / 2

	return math.Sqrt(halfPerim * (halfPerim - line1) * (halfPerim - line2) * (halfPerim - line3))

}

// Третья функция должна определить, является ли треугольник прямоугольным
func isRectangTriangle(x1, y1, x2, y2, x3, y3 float64) bool {

	isTriangle := isTriangle(x1, y1, x2, y2, x3, y3)

	if isTriangle != true {
		fmt.Println("Не является треугольником")
	}

	var result bool

	AB := []float64{x2 - x1, y2 - y1}

	BC := []float64{x3 - x2, y3 - y2}

	CA := []float64{x1 - x3, y1 - y3}

	ABxBC := AB[0]*BC[0] + AB[1]*BC[1]

	if ABxBC == 0 {
		result = true
	}

	BCxCA := BC[0]*CA[0] + BC[1]*CA[1]

	if BCxCA == 0 {
		result = true
	}

	CAxAB := CA[0]*AB[0] + CA[1]*AB[1]

	if CAxAB == 0 {
		result = true
	}

	return result

	/*lines := []float64{line1, line2, line3}

	for index, value := range lines {

		if index == 2 {
			break
		}

		if lines[index] >= lines[index+1] {
			lines[index] = lines[index+1]
			lines[index+1] = value
		}

	}
	fmt.Println(lines)
	if math.Pow(lines[2], 2) == math.Pow(lines[0], 2)+math.Pow(lines[1], 2) {
		return true
	} else {
		return false
	}*/

}

/*
Задача №4. Шахматная доска
Вход: размер шахматной доски, от 0 до 20
Выход: вывести на экран эту доску, заполняя поля нулями и единицами

Пример:
Вход: 5
Выход:

	0 1 0 1 0
	1 0 1 0 1
	0 1 0 1 0
	1 0 1 0 1
	0 1 0 1 0
*/
func printChessDesk(cnt int) {

	for i := 0; i < cnt; i++ {
		fmt.Print(i % 2)

		for j := 0; j < cnt-1; j++ {

			t := 0

			if i%2 == 0 {
				t++
			}

			fmt.Print(" ", (t+j)%2)
		}

		fmt.Println()
	}
}

func main() {

	// бутылки
	getBottleEnds(21)

	// это треугольник
	isTriangle := isTriangle(1, 1, 1, 5, 5, 1)

	fmt.Println("isTriangle - ", isTriangle)

	value := getSquareTriangle(1, 1, 1, 5, 5, 1)

	fmt.Println("SquareTr - ", value)

	// проверка на прямоугольный треугольник
	isRectangTriangle := isRectangTriangle(1, 1, 1, 5, 5, 1)

	fmt.Println("isRectangTriangle - ", isRectangTriangle)

	// шахм.доска
	printChessDesk(8)

}
